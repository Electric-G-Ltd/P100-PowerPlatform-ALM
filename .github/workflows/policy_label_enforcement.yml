# POLICY: Strict Label Enforcement for Issues and PRs
# Only one label from each of Topic, Action, Artefact is allowed.
# All labels must match exactly one in the lists below. No extras allowed.

name: Policy - Label Enforcement

on:
  issues:
    types: [opened, labeled, unlabeled, edited]
  pull_request:
    types: [opened, labeled, unlabeled, edited, synchronize]

jobs:
  enforce-label-taxonomy:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Enforce label taxonomy
        uses: actions/github-script@v7
        with:
          script: |
            // ----- DEFINITIVE LABEL TAXONOMY -----
            const topicLabels = [
              "1 Topic: Active",
              "1 Topic: Power Platform ALM",
              "1 Topic: Research"
            ];
            const actionLabels = [
              "2 Action: Archive",
              "2 Action: Automate",
              "2 Action: Configure",
              "2 Action: Decommission",
              "2 Action: Deploy",
              "2 Action: Document Process",
              "2 Action: Export Solution",
              "2 Action: Import Solution",
              "2 Action: Package Solution",
              "2 Action: Raise a PR",
              "2 Action: Raise an Issue",
              "2 Action: Refactor",
              "2 Action: Sync",
              "2 Action: Test"
            ];
            const artefactLabels = [
              "3 Artefact: Agent Orchestration Logic",
              "3 Artefact: Copilot Studio Action",
              "3 Artefact: Custom Connectors",
              "3 Artefact: Dataverse Tables and Relationships",
              "3 Artefact: Diagram",
              "3 Artefact: Documentation",
              "3 Artefact: Environmental Variables",
              "3 Artefact: GitHub Action",
              "3 Artefact: GitHub App",
              "3 Artefact: GitHub Flow",
              "3 Artefact: GitHub Script",
              "3 Artefact: Json Configuration",
              "3 Artefact: Plug In Assemblies"
            ];

            // Utility for error reporting
            function fail(msg) {
              core.setFailed(msg);
              if (context.issue.number) {
                github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `❌ **Label Policy Violation:**\n\n${msg}\n\nSee the governance guide or ask @electricgltd for help.`
                });
              } else if (context.payload.pull_request) {
                github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: `❌ **Label Policy Violation:**\n\n${msg}\n\nSee the governance guide or ask @electricgltd for help.`
                });
              }
            }

            // Determine whether we're on an Issue or PR
            const labels = context.payload.issue
              ? context.payload.issue.labels.map(l => typeof l === "string" ? l : l.name)
              : context.payload.pull_request
                ? context.payload.pull_request.labels.map(l => typeof l === "string" ? l : l.name)
                : [];

            function checkCategory(labelSet, categoryName) {
              const matches = labels.filter(l => labelSet.includes(l));
              if (matches.length === 0) {
                fail(`Missing required label from **${categoryName}**.\n\nAllowed: ${labelSet.join(", ")}`);
                return false;
              }
              if (matches.length > 1) {
                fail(`Multiple labels found for **${categoryName}**: ${matches.join(", ")}. Only one is allowed.`);
                return false;
              }
              return true;
            }

            // 1. Check exactly one label per category
            const topicOK = checkCategory(topicLabels, "Topic");
            const actionOK = checkCategory(actionLabels, "Action");
            const artefactOK = checkCategory(artefactLabels, "Artefact");

            // 2. Check for any extra (invalid) labels
            const allAllowed = [...topicLabels, ...actionLabels, ...artefactLabels];
            const invalidLabels = labels.filter(l => !allAllowed.includes(l));
            if (invalidLabels.length > 0) {
              fail(`Found invalid label(s): ${invalidLabels.join(", ")}. Only use labels from the approved taxonomy.`);
            }

            // 3. If any check failed, stop the workflow
            if (!topicOK || !actionOK || !artefactOK || invalidLabels.length > 0) {
              return;
            }

            // 4. Success
            console.log("✅ All labels are correct and policy-compliant.");